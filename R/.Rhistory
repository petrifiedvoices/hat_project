inner_join(person_inscription_pairs, by = "record_id", suffix = c("_1", "_2")) %>%
filter(person_id_1 < person_id_2) %>%
count(person_id_1, person_id_2, name = "weight") %>%
rename(from = person_id_1, to = person_id_2) %>%
filter(weight > 1)
# Step 3: Create color palette for ethnicities
unique_ethnicities <- unique(person_attributes$Ethnicity)
unique_ethnicities <- unique_ethnicities[!is.na(unique_ethnicities)]
ethnicity_colors <- rainbow(length(unique_ethnicities))
names(ethnicity_colors) <- unique_ethnicities
# Add a color for NA values
ethnicity_colors <- c(ethnicity_colors, "gray50")
names(ethnicity_colors)[length(ethnicity_colors)] <- NA
# Step 4: Create nodes data frame with all attributes
nodes <- data.frame(
name = person_attributes$person_id,
label = person_attributes$`Personal name full`,
ethnicity = person_attributes$Ethnicity,
color = ethnicity_colors[as.character(person_attributes$Ethnicity)]
)
# Handle NA ethnicity colors
nodes$color[is.na(nodes$ethnicity)] <- "gray50"
cooccurrence_pairs3 <- head(cooccurrence_pairs3, 20)
# Step 5: Create the network graph
network_graph3 <- graph_from_data_frame(cooccurrence_pairs3,
vertices = nodes,
directed = FALSE)
# Step 6: Basic visualization with ethnicity colors
plot(network_graph3,
vertex.size = 8,
vertex.color = V(network_graph3)$color,
vertex.label = V(network_graph3)$label,
vertex.label.cex = 0.1,
vertex.label.color = "black",
edge.width = E(network_graph3)$weight,
layout = layout_with_fr(network_graph3),
main = "Person Co-occurrence Network (Colored by Ethnicity)")
# Add legend
legend("topright",
legend = names(ethnicity_colors),
fill = ethnicity_colors,
title = "Ethnicity",
cex = 0.8)
# Step 2: Create co-occurrence matrix (same as before)
cooccurrence_pairs3 <- person_inscription_pairs %>%
inner_join(person_inscription_pairs, by = "record_id", suffix = c("_1", "_2")) %>%
filter(person_id_1 < person_id_2) %>%
count(person_id_1, person_id_2, name = "weight") %>%
rename(from = person_id_1, to = person_id_2)
# Step 2: Create co-occurrence matrix (same as before)
cooccurrence_pairs3 <- person_inscription_pairs %>%
inner_join(person_inscription_pairs, by = "record_id", suffix = c("_1", "_2")) %>%
filter(person_id_1 < person_id_2) %>%
count(person_id_1, person_id_2, name = "weight") %>%
rename(from = person_id_1, to = person_id_2) %>%
filter(weight > 3)
# Load required libraries
library(dplyr)
library(tidyr)
library(igraph)
# Step 1: Create person-inscription pairs with labels and ethnicity
person_inscription_pairs <- result %>%
# Split the Person > column to get individual persons per inscription
separate_longer_delim(`Person >`, delim = "|") %>%
mutate(`Person >` = trimws(`Person >`)) %>%
rename(record_id = `Record ID`) %>%
# Keep relevant columns including the full names and ethnicity
select(record_id, person_id = `Person >`, `Personal name full`, Ethnicity) %>%
filter(!is.na(person_id) & person_id != "")
# Create a lookup table for person attributes
person_attributes <- person_inscription_pairs %>%
select(person_id, `Personal name full`, Ethnicity) %>%
distinct() %>%
# Handle cases where same person_id might have different attributes
group_by(person_id) %>%
summarise(
`Personal name full` = first(`Personal name full`),
Ethnicity = first(Ethnicity),
.groups = "drop"
)
# Step 2: Create co-occurrence matrix (same as before)
cooccurrence_pairs3 <- person_inscription_pairs %>%
inner_join(person_inscription_pairs, by = "record_id", suffix = c("_1", "_2")) %>%
filter(person_id_1 < person_id_2) %>%
count(person_id_1, person_id_2, name = "weight") %>%
rename(from = person_id_1, to = person_id_2) %>%
filter(weight > 3)
# Step 3: Create color palette for ethnicities
unique_ethnicities <- unique(person_attributes$Ethnicity)
unique_ethnicities <- unique_ethnicities[!is.na(unique_ethnicities)]
ethnicity_colors <- rainbow(length(unique_ethnicities))
names(ethnicity_colors) <- unique_ethnicities
# Add a color for NA values
ethnicity_colors <- c(ethnicity_colors, "gray50")
names(ethnicity_colors)[length(ethnicity_colors)] <- NA
# Step 4: Create nodes data frame with all attributes
nodes <- data.frame(
name = person_attributes$person_id,
label = person_attributes$`Personal name full`,
ethnicity = person_attributes$Ethnicity,
color = ethnicity_colors[as.character(person_attributes$Ethnicity)]
)
# Handle NA ethnicity colors
nodes$color[is.na(nodes$ethnicity)] <- "gray50"
cooccurrence_pairs3 <- head(cooccurrence_pairs3, 20)
# Step 5: Create the network graph
network_graph3 <- graph_from_data_frame(cooccurrence_pairs3,
vertices = nodes,
directed = FALSE)
# Step 6: Basic visualization with ethnicity colors
plot(network_graph3,
vertex.size = 8,
vertex.color = V(network_graph3)$color,
vertex.label = V(network_graph3)$label,
vertex.label.cex = 0.1,
vertex.label.color = "black",
edge.width = E(network_graph3)$weight,
layout = layout_with_fr(network_graph3),
main = "Person Co-occurrence Network (Colored by Ethnicity)")
# Add legend
legend("topright",
legend = names(ethnicity_colors),
fill = ethnicity_colors,
title = "Ethnicity",
cex = 0.8)
# Load required libraries
library(dplyr)
library(tidyr)
library(igraph)
# Step 1: Create person-inscription pairs with labels and ethnicity
person_inscription_pairs <- result %>%
# Split the Person > column to get individual persons per inscription
separate_longer_delim(`Person >`, delim = "|") %>%
mutate(`Person >` = trimws(`Person >`)) %>%
rename(record_id = `Record ID`) %>%
# Keep relevant columns including the full names and ethnicity
select(record_id, person_id = `Person >`, `Personal name full`, Ethnicity) %>%
filter(!is.na(person_id) & person_id != "")
# Create a lookup table for person attributes
person_attributes <- person_inscription_pairs %>%
select(person_id, `Personal name full`, Ethnicity) %>%
distinct() %>%
# Handle cases where same person_id might have different attributes
group_by(person_id) %>%
summarise(
`Personal name full` = first(`Personal name full`),
Ethnicity = first(Ethnicity),
.groups = "drop"
)
# Step 2: Create co-occurrence matrix (same as before)
cooccurrence_pairs3 <- person_inscription_pairs %>%
inner_join(person_inscription_pairs, by = "record_id", suffix = c("_1", "_2")) %>%
filter(person_id_1 < person_id_2) %>%
count(person_id_1, person_id_2, name = "weight") %>%
rename(from = person_id_1, to = person_id_2) %>%
filter(weight > 10)
# Step 3: Create color palette for ethnicities
unique_ethnicities <- unique(person_attributes$Ethnicity)
unique_ethnicities <- unique_ethnicities[!is.na(unique_ethnicities)]
ethnicity_colors <- rainbow(length(unique_ethnicities))
names(ethnicity_colors) <- unique_ethnicities
# Add a color for NA values
ethnicity_colors <- c(ethnicity_colors, "gray50")
names(ethnicity_colors)[length(ethnicity_colors)] <- NA
# Step 4: Create nodes data frame with all attributes
nodes <- data.frame(
name = person_attributes$person_id,
label = person_attributes$`Personal name full`,
ethnicity = person_attributes$Ethnicity,
color = ethnicity_colors[as.character(person_attributes$Ethnicity)]
)
# Handle NA ethnicity colors
nodes$color[is.na(nodes$ethnicity)] <- "gray50"
cooccurrence_pairs3 <- head(cooccurrence_pairs3, 20)
# Step 5: Create the network graph
network_graph3 <- graph_from_data_frame(cooccurrence_pairs3,
vertices = nodes,
directed = FALSE)
# Step 6: Basic visualization with ethnicity colors
plot(network_graph3,
vertex.size = 8,
vertex.color = V(network_graph3)$color,
vertex.label = V(network_graph3)$label,
vertex.label.cex = 0.1,
vertex.label.color = "black",
edge.width = E(network_graph3)$weight,
layout = layout_with_fr(network_graph3),
main = "Person Co-occurrence Network (Colored by Ethnicity)")
# Add legend
legend("topright",
legend = names(ethnicity_colors),
fill = ethnicity_colors,
title = "Ethnicity",
cex = 0.8)
# Step 2: Create co-occurrence matrix (same as before)
cooccurrence_pairs3 <- person_inscription_pairs %>%
inner_join(person_inscription_pairs, by = "record_id", suffix = c("_1", "_2")) %>%
filter(person_id_1 < person_id_2) %>%
count(person_id_1, person_id_2, name = "weight") %>%
rename(from = person_id_1, to = person_id_2)
# Step 2: Create co-occurrence matrix (same as before)
cooccurrence_pairs <- person_inscription_pairs %>%
inner_join(person_inscription_pairs, by = "record_id", suffix = c("_1", "_2")) %>%
filter(person_id_1 < person_id_2) %>%
count(person_id_1, person_id_2, name = "weight") %>%
rename(from = person_id_1, to = person_id_2)
cooccurrence_pairs3 <- cooccurrence_pairs %>%
filter(weight > 1)
network_graph3 <- graph_from_data_frame(cooccurrence_pairs3, directed = FALSE)
# Load required libraries
library(dplyr)
library(tidyr)
library(igraph)
# Step 1: Create person-inscription pairs with labels and ethnicity
person_inscription_pairs <- result %>%
# Split the Person > column to get individual persons per inscription
separate_longer_delim(`Person >`, delim = "|") %>%
mutate(`Person >` = trimws(`Person >`)) %>%
rename(record_id = `Record ID`) %>%
# Keep relevant columns including the full names and ethnicity
select(record_id, person_id = `Person >`, `Personal name full`, Ethnicity) %>%
filter(!is.na(person_id) & person_id != "")
# Create a lookup table for person attributes
person_attributes <- person_inscription_pairs %>%
select(person_id, `Personal name full`, Ethnicity) %>%
distinct() %>%
# Handle cases where same person_id might have different attributes
group_by(person_id) %>%
summarise(
`Personal name full` = first(`Personal name full`),
Ethnicity = first(Ethnicity),
.groups = "drop"
)
# Step 2: Create co-occurrence matrix (same as before)
cooccurrence_pairs <- person_inscription_pairs %>%
inner_join(person_inscription_pairs, by = "record_id", suffix = c("_1", "_2")) %>%
filter(person_id_1 < person_id_2) %>%
count(person_id_1, person_id_2, name = "weight") %>%
rename(from = person_id_1, to = person_id_2)
cooccurrence_pairs3 <- cooccurrence_pairs %>%
filter(weight > 1)
network_graph3 <- graph_from_data_frame(cooccurrence_pairs3, directed = FALSE)
# Step 3: Create color palette for ethnicities
unique_ethnicities <- unique(person_attributes$Ethnicity)
unique_ethnicities <- unique_ethnicities[!is.na(unique_ethnicities)]
ethnicity_colors <- rainbow(length(unique_ethnicities))
names(ethnicity_colors) <- unique_ethnicities
# Add a color for NA values
ethnicity_colors <- c(ethnicity_colors, "gray50")
names(ethnicity_colors)[length(ethnicity_colors)] <- NA
# Step 4: Create nodes data frame with all attributes
nodes <- data.frame(
name = person_attributes$person_id,
label = person_attributes$`Personal name full`,
ethnicity = person_attributes$Ethnicity,
color = ethnicity_colors[as.character(person_attributes$Ethnicity)]
)
# Handle NA ethnicity colors
nodes$color[is.na(nodes$ethnicity)] <- "gray50"
cooccurrence_pairs3 <- head(cooccurrence_pairs3, 20)
# Step 5: Create the network graph
network_graph3 <- graph_from_data_frame(cooccurrence_pairs3,
vertices = nodes,
directed = FALSE)
# Step 6: Basic visualization with ethnicity colors
plot(network_graph3,
vertex.size = 8,
vertex.color = V(network_graph3)$color,
vertex.label = V(network_graph3)$label,
vertex.label.cex = 0.1,
vertex.label.color = "black",
edge.width = E(network_graph3)$weight,
layout = layout_with_fr(network_graph3),
main = "Person Co-occurrence Network (Colored by Ethnicity)")
# Add legend
legend("topright",
legend = names(ethnicity_colors),
fill = ethnicity_colors,
title = "Ethnicity",
cex = 0.8)
# Load required libraries
library(dplyr)
library(tidyr)
library(igraph)
# Step 1: Create person-inscription pairs with labels and ethnicity
person_inscription_pairs <- result %>%
# Split the Person > column to get individual persons per inscription
separate_longer_delim(`Person >`, delim = "|") %>%
mutate(`Person >` = trimws(`Person >`)) %>%
rename(record_id = `Record ID`) %>%
# Keep relevant columns including the full names and ethnicity
select(record_id, person_id = `Person >`, `Personal name full`, Ethnicity) %>%
filter(!is.na(person_id) & person_id != "")
# Create a lookup table for person attributes
person_attributes <- person_inscription_pairs %>%
select(person_id, `Personal name full`, Ethnicity) %>%
distinct() %>%
# Handle cases where same person_id might have different attributes
group_by(person_id) %>%
summarise(
`Personal name full` = first(`Personal name full`),
Ethnicity = first(Ethnicity),
.groups = "drop"
)
# Step 2: Create co-occurrence matrix (same as before)
cooccurrence_pairs <- person_inscription_pairs %>%
inner_join(person_inscription_pairs, by = "record_id", suffix = c("_1", "_2")) %>%
filter(person_id_1 < person_id_2) %>%
count(person_id_1, person_id_2, name = "weight") %>%
rename(from = person_id_1, to = person_id_2)
# Step 3: Create color palette for ethnicities
unique_ethnicities <- unique(person_attributes$Ethnicity)
unique_ethnicities <- unique_ethnicities[!is.na(unique_ethnicities)]
ethnicity_colors <- rainbow(length(unique_ethnicities))
names(ethnicity_colors) <- unique_ethnicities
# Add a color for NA values
ethnicity_colors <- c(ethnicity_colors, "gray50")
names(ethnicity_colors)[length(ethnicity_colors)] <- NA
# Step 4: Create nodes data frame with all attributes
nodes <- data.frame(
name = person_attributes$person_id,
label = person_attributes$`Personal name full`,
ethnicity = person_attributes$Ethnicity,
color = ethnicity_colors[as.character(person_attributes$Ethnicity)]
)
# Handle NA ethnicity colors
nodes$color[is.na(nodes$ethnicity)] <- "gray50"
cooccurrence_pairs3 <- cooccurrence_pairs %>%
filter(weight > 1)
network_graph3 <- graph_from_data_frame(cooccurrence_pairs3, directed = FALSE)
# Step 5: Create the network graph
#network_graph3 <- graph_from_data_frame(cooccurrence_pairs3,
#                                     vertices = nodes,
#                                     directed = FALSE)
# Step 6: Basic visualization with ethnicity colors
plot(network_graph3,
vertex.size = 8,
vertex.color = V(network_graph3)$color,
vertex.label = V(network_graph3)$label,
vertex.label.cex = 0.1,
vertex.label.color = "black",
edge.width = E(network_graph3)$weight,
layout = layout_with_fr(network_graph3),
main = "Person Co-occurrence Network (Colored by Ethnicity)")
# Add legend
legend("topright",
legend = names(ethnicity_colors),
fill = ethnicity_colors,
title = "Ethnicity",
cex = 0.8)
# Step 6: Basic visualization with ethnicity colors
plot(network_graph3,
vertex.size = 8,
vertex.color = V(network_graph3)$color,
vertex.label = V(network_graph3)$label,
vertex.label.cex = 0.8,
vertex.label.color = "black",
edge.width = E(network_graph3)$weight,
layout = layout_with_fr(network_graph3),
main = "Person Co-occurrence Network (Colored by Ethnicity)")
# Add legend
legend("topright",
legend = names(ethnicity_colors),
fill = ethnicity_colors,
title = "Ethnicity",
cex = 0.8)
# Add legend
legend("topright",
legend = names(ethnicity_colors),
fill = ethnicity_colors,
title = "Ethnicity",
cex = 0.8)
# Load required libraries
library(dplyr)
library(tidyr)
library(igraph)
# Step 1: Create person-inscription pairs with labels and ethnicity
person_inscription_pairs <- result %>%
# Split the Person > column to get individual persons per inscription
separate_longer_delim(`Person >`, delim = "|") %>%
mutate(`Person >` = trimws(`Person >`)) %>%
rename(record_id = `Record ID`) %>%
# Keep relevant columns including the full names and ethnicity
select(record_id, person_id = `Person >`, `Personal name full`, Ethnicity) %>%
filter(!is.na(person_id) & person_id != "")
# Create a lookup table for person attributes
person_attributes <- person_inscription_pairs %>%
select(person_id, `Personal name full`, Ethnicity) %>%
distinct() %>%
# Handle cases where same person_id might have different attributes
group_by(person_id) %>%
summarise(
`Personal name full` = first(`Personal name full`),
Ethnicity = first(Ethnicity),
.groups = "drop"
)
# Step 2: Create co-occurrence matrix (same as before)
cooccurrence_pairs <- person_inscription_pairs %>%
inner_join(person_inscription_pairs, by = "record_id", suffix = c("_1", "_2")) %>%
filter(person_id_1 < person_id_2) %>%
count(person_id_1, person_id_2, name = "weight") %>%
rename(from = person_id_1, to = person_id_2)
# Step 3: Create color palette for ethnicities
unique_ethnicities <- unique(person_attributes$Ethnicity)
unique_ethnicities <- unique_ethnicities[!is.na(unique_ethnicities)]
ethnicity_colors <- rainbow(length(unique_ethnicities))
names(ethnicity_colors) <- unique_ethnicities
# Add a color for NA values
ethnicity_colors <- c(ethnicity_colors, "gray50")
names(ethnicity_colors)[length(ethnicity_colors)] <- NA
# Step 4: Create nodes data frame with all attributes
nodes <- data.frame(
name = person_attributes$person_id,
label = person_attributes$`Personal name full`,
ethnicity = person_attributes$Ethnicity,
color = ethnicity_colors[as.character(person_attributes$Ethnicity)]
)
# Handle NA ethnicity colors
nodes$color[is.na(nodes$ethnicity)] <- "gray50"
cooccurrence_pairs3 <- cooccurrence_pairs %>%
filter(weight > 1)
network_graph3 <- graph_from_data_frame(cooccurrence_pairs3, directed = FALSE)
# Step 5: Create the network graph
#network_graph3 <- graph_from_data_frame(cooccurrence_pairs3,
#                                     vertices = nodes,
#                                     directed = FALSE)
# Step 6: Basic visualization with ethnicity colors
plot(network_graph3,
vertex.size = 8,
vertex.color = V(network_graph3)$color,
vertex.label = V(network_graph3)$label,
vertex.label.cex = 0.8,
vertex.label.color = "black",
edge.width = E(network_graph3)$weight,
layout = layout_with_fr(network_graph3),
main = "Person Co-occurrence Network (Colored by Ethnicity)")
# Add legend
legend("topright",
legend = names(ethnicity_colors),
fill = ethnicity_colors,
title = "Ethnicity",
cex = 0.8)
# Load required libraries
library(dplyr)
library(tidyr)
library(igraph)
# Step 1: Create person-inscription pairs with labels and ethnicity
person_inscription_pairs <- result %>%
# Split the Person > column to get individual persons per inscription
separate_longer_delim(`Person >`, delim = "|") %>%
mutate(`Person >` = trimws(`Person >`)) %>%
rename(record_id = `Record ID`) %>%
# Keep relevant columns including the full names and ethnicity
select(record_id, person_id = `Person >`, `Personal name full`, Ethnicity) %>%
filter(!is.na(person_id) & person_id != "")
# Create a lookup table for person attributes
person_attributes <- person_inscription_pairs %>%
select(person_id, `Personal name full`, Ethnicity) %>%
distinct() %>%
# Handle cases where same person_id might have different attributes
group_by(person_id) %>%
summarise(
`Personal name full` = first(`Personal name full`),
Ethnicity = first(Ethnicity),
.groups = "drop"
)
# Step 2: Create co-occurrence matrix (same as before)
cooccurrence_pairs <- person_inscription_pairs %>%
inner_join(person_inscription_pairs, by = "record_id", suffix = c("_1", "_2")) %>%
filter(person_id_1 < person_id_2) %>%
count(person_id_1, person_id_2, name = "weight") %>%
rename(from = person_id_1, to = person_id_2)
# Step 3: Create color palette for ethnicities
unique_ethnicities <- unique(person_attributes$Ethnicity)
unique_ethnicities <- unique_ethnicities[!is.na(unique_ethnicities)]
ethnicity_colors <- rainbow(length(unique_ethnicities))
names(ethnicity_colors) <- unique_ethnicities
# Add a color for NA values
ethnicity_colors <- c(ethnicity_colors, "gray50")
names(ethnicity_colors)[length(ethnicity_colors)] <- NA
# Step 4: Create nodes data frame with all attributes
nodes <- data.frame(
name = person_attributes$person_id,
label = person_attributes$`Personal name full`,
ethnicity = person_attributes$Ethnicity,
color = ethnicity_colors[as.character(person_attributes$Ethnicity)]
)
# Handle NA ethnicity colors
nodes$color[is.na(nodes$ethnicity)] <- "gray50"
cooccurrence_pairs3 <- cooccurrence_pairs %>%
filter(weight > 1)
# Step 5: Create the network graph
#network_graph3 <- graph_from_data_frame(cooccurrence_pairs3, directed = FALSE)
network_graph3 <- graph_from_data_frame(cooccurrence_pairs3,
vertices = nodes,
directed = FALSE)
# Step 6: Basic visualization with ethnicity colors
plot(network_graph3,
vertex.size = 8,
vertex.color = V(network_graph3)$color,
vertex.label = V(network_graph3)$label,
vertex.label.cex = 0.8,
vertex.label.color = "black",
edge.width = E(network_graph3)$weight,
layout = layout_with_fr(network_graph3),
main = "Person Co-occurrence Network (Colored by Ethnicity)")
# Add legend
legend("topright",
legend = names(ethnicity_colors),
fill = ethnicity_colors,
title = "Ethnicity",
cex = 0.8)
